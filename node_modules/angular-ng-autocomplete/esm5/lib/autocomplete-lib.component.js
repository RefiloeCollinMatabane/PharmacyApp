/**
 * @fileoverview added by tsickle
 * Generated from: lib/autocomplete-lib.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var AutocompleteLibComponent = /** @class */ (function () {
    function AutocompleteLibComponent() {
    }
    /**
     * @return {?}
     */
    AutocompleteLibComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /** @nocollapse */
    AutocompleteLibComponent.ctorParameters = function () { return []; };
AutocompleteLibComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: AutocompleteLibComponent, selectors: [["ng-autocomplete-lib"]], factory: function AutocompleteLibComponent_Factory(t) { return new (t || AutocompleteLibComponent)(); }, consts: 2, vars: 0, template: function AutocompleteLibComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "p");
        ɵngcc0.ɵɵtext(1, " autocomplete-lib works! ");
        ɵngcc0.ɵɵelementEnd();
    } }, encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(AutocompleteLibComponent, [{
        type: Component,
        args: [{
                selector: 'ng-autocomplete-lib',
                template: "\n    <p>\n      autocomplete-lib works!\n    </p>\n  "
            }]
    }], function () { return []; }, { ngOnInit: [] });
    return AutocompleteLibComponent;
}());
export { AutocompleteLibComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3JjbWF0L0Ryb3Bib3gvUEMvRG93bmxvYWRzL1BoYXJtYWN5QXBwLW1hc3Rlci9QaGFybWFjeUFwcC1tYXN0ZXIvbm9kZV9tb2R1bGVzL2FuZ3VsYXItbmctYXV0b2NvbXBsZXRlL2VzbTUvbGliL2F1dG9jb21wbGV0ZS1saWIuY29tcG9uZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBTUE7Ozs7Ozs7Ozs7TUFVTSxBQU1BOzs7Ozs7Ozs7Ozs7OztzREFFbUUiLCJmaWxlIjoiYXV0b2NvbXBsZXRlLWxpYi5jb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogR2VuZXJhdGVkIGZyb206IGxpYi9hdXRvY29tcGxldGUtbGliLmNvbXBvbmVudC50c1xuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGNvbnN0YW50UHJvcGVydHksZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xuICovXG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbnZhciBBdXRvY29tcGxldGVMaWJDb21wb25lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXV0b2NvbXBsZXRlTGliQ29tcG9uZW50KCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEF1dG9jb21wbGV0ZUxpYkNvbXBvbmVudC5wcm90b3R5cGUubmdPbkluaXQgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICB9O1xuICAgIEF1dG9jb21wbGV0ZUxpYkNvbXBvbmVudC5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IENvbXBvbmVudCwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICduZy1hdXRvY29tcGxldGUtbGliJyxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwiXFxuICAgIDxwPlxcbiAgICAgIGF1dG9jb21wbGV0ZS1saWIgd29ya3MhXFxuICAgIDwvcD5cXG4gIFwiXG4gICAgICAgICAgICAgICAgfV0gfVxuICAgIF07XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgQXV0b2NvbXBsZXRlTGliQ29tcG9uZW50LmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH07XG4gICAgcmV0dXJuIEF1dG9jb21wbGV0ZUxpYkNvbXBvbmVudDtcbn0oKSk7XG5leHBvcnQgeyBBdXRvY29tcGxldGVMaWJDb21wb25lbnQgfTtcbiJdfQ==