/**
 * @fileoverview added by tsickle
 * Generated from: lib/autocomplete-lib.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { AutocompleteLibComponent } from './autocomplete-lib.component';
import { AutocompleteComponent } from './autocomplete/autocomplete.component';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { HighlightPipe } from './autocomplete/highlight.pipe';
import * as ɵngcc0 from '@angular/core';
var AutocompleteLibModule = /** @class */ (function () {
    function AutocompleteLibModule() {
    }
AutocompleteLibModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: AutocompleteLibModule });
/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(AutocompleteLibModule, { declarations: function () { return [AutocompleteLibComponent, AutocompleteComponent, HighlightPipe]; }, imports: function () { return [CommonModule,
        FormsModule]; }, exports: function () { return [AutocompleteLibComponent, AutocompleteComponent, HighlightPipe]; } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(AutocompleteLibModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule
                ],
                declarations: [AutocompleteLibComponent, AutocompleteComponent, HighlightPipe],
                exports: [AutocompleteLibComponent, AutocompleteComponent, HighlightPipe]
            }]
    }], function () { return []; }, null);
AutocompleteLibModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function AutocompleteLibModule_Factory(t) { return new (t || AutocompleteLibModule)(); }, imports: [[
            CommonModule,
            FormsModule
        ]] });
    return AutocompleteLibModule;
}());
export { AutocompleteLibModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3JjbWF0L0Ryb3Bib3gvUEMvRG93bmxvYWRzL1BoYXJtYWN5QXBwLW1hc3Rlci9QaGFybWFjeUFwcC1tYXN0ZXIvbm9kZV9tb2R1bGVzL2FuZ3VsYXItbmctYXV0b2NvbXBsZXRlL2VzbTUvbGliL2F1dG9jb21wbGV0ZS1saWIubW9kdWxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7QUFXQTs7S0FFSzs7Ozs7Ozs7Ozs7Ozs7Ozs7O2NBVUMiLCJmaWxlIjoiYXV0b2NvbXBsZXRlLWxpYi5tb2R1bGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogR2VuZXJhdGVkIGZyb206IGxpYi9hdXRvY29tcGxldGUtbGliLm1vZHVsZS50c1xuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGNvbnN0YW50UHJvcGVydHksZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xuICovXG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXV0b2NvbXBsZXRlTGliQ29tcG9uZW50IH0gZnJvbSAnLi9hdXRvY29tcGxldGUtbGliLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBdXRvY29tcGxldGVDb21wb25lbnQgfSBmcm9tICcuL2F1dG9jb21wbGV0ZS9hdXRvY29tcGxldGUuY29tcG9uZW50JztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEhpZ2hsaWdodFBpcGUgfSBmcm9tICcuL2F1dG9jb21wbGV0ZS9oaWdobGlnaHQucGlwZSc7XG52YXIgQXV0b2NvbXBsZXRlTGliTW9kdWxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEF1dG9jb21wbGV0ZUxpYk1vZHVsZSgpIHtcbiAgICB9XG4gICAgQXV0b2NvbXBsZXRlTGliTW9kdWxlLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogTmdNb2R1bGUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgICAgIGltcG9ydHM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbW1vbk1vZHVsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIEZvcm1zTW9kdWxlXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uczogW0F1dG9jb21wbGV0ZUxpYkNvbXBvbmVudCwgQXV0b2NvbXBsZXRlQ29tcG9uZW50LCBIaWdobGlnaHRQaXBlXSxcbiAgICAgICAgICAgICAgICAgICAgZXhwb3J0czogW0F1dG9jb21wbGV0ZUxpYkNvbXBvbmVudCwgQXV0b2NvbXBsZXRlQ29tcG9uZW50LCBIaWdobGlnaHRQaXBlXVxuICAgICAgICAgICAgICAgIH0sXSB9XG4gICAgXTtcbiAgICByZXR1cm4gQXV0b2NvbXBsZXRlTGliTW9kdWxlO1xufSgpKTtcbmV4cG9ydCB7IEF1dG9jb21wbGV0ZUxpYk1vZHVsZSB9O1xuIl19