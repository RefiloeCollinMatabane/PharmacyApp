{"version":3,"sources":["c:/Users/rcmat/Dropbox/PC/Downloads/PharmacyApp-master/PharmacyApp-master/node_modules/angular-ng-autocomplete/bundles/angular-ng-autocomplete.umd.js"],"names":[],"mappings":"AAAA;6RAC+M;gOAClC;;qFAE7G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAsN1D,AAMA;;;;;;;;;;;;;;sDAEmE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA4sCnE,AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAwMA;;;;;;;uDAKA;;;;;;;;;;;SAWD;;;;;;;;;;;;;;;;;;;;;cAUC","file":"angular-ng-autocomplete.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/forms'), require('@angular/common')) :\n    typeof define === 'function' && define.amd ? define('angular-ng-autocomplete', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/forms', '@angular/common'], factory) :\n    (global = global || self, factory(global['angular-ng-autocomplete'] = {}, global.ng.core, global.rxjs, global.rxjs.operators, global.ng.forms, global.ng.common));\n}(this, (function (exports, core, rxjs, operators, forms, common) { 'use strict';\n\n    /*! *****************************************************************************\n    Copyright (c) Microsoft Corporation. All rights reserved.\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\n    this file except in compliance with the License. You may obtain a copy of the\n    License at http://www.apache.org/licenses/LICENSE-2.0\n\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\n    MERCHANTABLITY OR NON-INFRINGEMENT.\n\n    See the Apache Version 2.0 License for specific language governing permissions\n    and limitations under the License.\n    ***************************************************************************** */\n    /* global Reflect, Promise */\n\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n\n    function __extends(d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    }\n\n    var __assign = function() {\n        __assign = Object.assign || function __assign(t) {\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\n                s = arguments[i];\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n            }\n            return t;\n        };\n        return __assign.apply(this, arguments);\n    };\n\n    function __rest(s, e) {\n        var t = {};\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n            t[p] = s[p];\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                    t[p[i]] = s[p[i]];\n            }\n        return t;\n    }\n\n    function __decorate(decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    }\n\n    function __param(paramIndex, decorator) {\n        return function (target, key) { decorator(target, key, paramIndex); }\n    }\n\n    function __metadata(metadataKey, metadataValue) {\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n    }\n\n    function __awaiter(thisArg, _arguments, P, generator) {\n        return new (P || (P = Promise))(function (resolve, reject) {\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n    }\n\n    function __generator(thisArg, body) {\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n        function verb(n) { return function (v) { return step([n, v]); }; }\n        function step(op) {\n            if (f) throw new TypeError(\"Generator is already executing.\");\n            while (_) try {\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n                if (y = 0, t) op = [op[0] & 2, t.value];\n                switch (op[0]) {\n                    case 0: case 1: t = op; break;\n                    case 4: _.label++; return { value: op[1], done: false };\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                    default:\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                        if (t[2]) _.ops.pop();\n                        _.trys.pop(); continue;\n                }\n                op = body.call(thisArg, _);\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n        }\n    }\n\n    function __exportStar(m, exports) {\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n    }\n\n    function __values(o) {\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n        if (m) return m.call(o);\n        return {\n            next: function () {\n                if (o && i >= o.length) o = void 0;\n                return { value: o && o[i++], done: !o };\n            }\n        };\n    }\n\n    function __read(o, n) {\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n        if (!m) return o;\n        var i = m.call(o), r, ar = [], e;\n        try {\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n        }\n        catch (error) { e = { error: error }; }\n        finally {\n            try {\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\n            }\n            finally { if (e) throw e.error; }\n        }\n        return ar;\n    }\n\n    function __spread() {\n        for (var ar = [], i = 0; i < arguments.length; i++)\n            ar = ar.concat(__read(arguments[i]));\n        return ar;\n    }\n\n    function __spreadArrays() {\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n                r[k] = a[j];\n        return r;\n    };\n\n    function __await(v) {\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\n    }\n\n    function __asyncGenerator(thisArg, _arguments, generator) {\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n        function fulfill(value) { resume(\"next\", value); }\n        function reject(value) { resume(\"throw\", value); }\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n    }\n\n    function __asyncDelegator(o) {\n        var i, p;\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\n    }\n\n    function __asyncValues(o) {\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n        var m = o[Symbol.asyncIterator], i;\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n    }\n\n    function __makeTemplateObject(cooked, raw) {\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n        return cooked;\n    };\n\n    function __importStar(mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        result.default = mod;\n        return result;\n    }\n\n    function __importDefault(mod) {\n        return (mod && mod.__esModule) ? mod : { default: mod };\n    }\n\n    /**\n     * @fileoverview added by tsickle\n     * Generated from: lib/autocomplete-lib.component.ts\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var AutocompleteLibComponent = /** @class */ (function () {\n        function AutocompleteLibComponent() {\n        }\n        /**\n         * @return {?}\n         */\n        AutocompleteLibComponent.prototype.ngOnInit = /**\n         * @return {?}\n         */\n        function () {\n        };\n        AutocompleteLibComponent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'ng-autocomplete-lib',\n                        template: \"\\n    <p>\\n      autocomplete-lib works!\\n    </p>\\n  \"\n                    }] }\n        ];\n        /** @nocollapse */\n        AutocompleteLibComponent.ctorParameters = function () { return []; };\n        return AutocompleteLibComponent;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * Generated from: lib/autocomplete/autocomplete.component.ts\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    /**\n     * Keyboard events\n     * @type {?}\n     */\n    var isArrowUp = (/**\n     * @param {?} keyCode\n     * @return {?}\n     */\n    function (keyCode) { return keyCode === 38; });\n    var ɵ0 = isArrowUp;\n    /** @type {?} */\n    var isArrowDown = (/**\n     * @param {?} keyCode\n     * @return {?}\n     */\n    function (keyCode) { return keyCode === 40; });\n    var ɵ1 = isArrowDown;\n    /** @type {?} */\n    var isArrowUpDown = (/**\n     * @param {?} keyCode\n     * @return {?}\n     */\n    function (keyCode) { return isArrowUp(keyCode) || isArrowDown(keyCode); });\n    var ɵ2 = isArrowUpDown;\n    /** @type {?} */\n    var isEnter = (/**\n     * @param {?} keyCode\n     * @return {?}\n     */\n    function (keyCode) { return keyCode === 13; });\n    var ɵ3 = isEnter;\n    /** @type {?} */\n    var isBackspace = (/**\n     * @param {?} keyCode\n     * @return {?}\n     */\n    function (keyCode) { return keyCode === 8; });\n    var ɵ4 = isBackspace;\n    /** @type {?} */\n    var isDelete = (/**\n     * @param {?} keyCode\n     * @return {?}\n     */\n    function (keyCode) { return keyCode === 46; });\n    var ɵ5 = isDelete;\n    /** @type {?} */\n    var isESC = (/**\n     * @param {?} keyCode\n     * @return {?}\n     */\n    function (keyCode) { return keyCode === 27; });\n    var ɵ6 = isESC;\n    /** @type {?} */\n    var isTab = (/**\n     * @param {?} keyCode\n     * @return {?}\n     */\n    function (keyCode) { return keyCode === 9; });\n    var ɵ7 = isTab;\n    var AutocompleteComponent = /** @class */ (function () {\n        function AutocompleteComponent(elementRef, renderer) {\n            this.renderer = renderer;\n            // input events\n            this.query = ''; // search query\n            // search query\n            this.filteredList = []; // list of items\n            // list of items\n            this.historyList = []; // list of history items\n            // list of history items\n            this.isHistoryListVisible = true;\n            this.selectedIdx = -1;\n            this.toHighlight = '';\n            this.notFound = false;\n            this.isFocused = false;\n            this.isOpen = false;\n            this.isScrollToEnd = false;\n            this.overlay = false;\n            this.manualOpen = undefined;\n            this.manualClose = undefined;\n            // @Inputs\n            /**\n             * Data of items list.\n             * It can be array of strings or array of objects.\n             */\n            this.data = [];\n            // keyword to filter the list\n            this.placeHolder = ''; // input placeholder\n            // input placeholder\n            this.heading = '';\n            /**\n             * Heading text of history list.\n             * If it is null then history heading is hidden.\n             */\n            this.historyHeading = 'Recently selected';\n            this.historyListMaxNumber = 15; // maximum number of items in the history list.\n            // maximum number of items in the history list.\n            this.notFoundText = 'Not found'; // set custom text when filter returns empty result\n            // input disable/enable\n            /**\n             * The minimum number of characters the user must type before a search is performed.\n             */\n            this.minQueryLength = 1;\n            // @Output events\n            /**\n             * Event that is emitted whenever an item from the list is selected.\n             */\n            this.selected = new core.EventEmitter();\n            /**\n             * Event that is emitted whenever an input is changed.\n             */\n            this.inputChanged = new core.EventEmitter();\n            /**\n             * Event that is emitted whenever an input is focused.\n             */\n            this.inputFocused = new core.EventEmitter();\n            /**\n             * Event that is emitted whenever an input is cleared.\n             */\n            this.inputCleared = new core.EventEmitter();\n            /**\n             * Event that is emitted when the autocomplete panel is opened.\n             */\n            this.opened = new core.EventEmitter();\n            /**\n             * Event that is emitted when the autocomplete panel is closed.\n             */\n            this.closed = new core.EventEmitter();\n            /**\n             * Event that is emitted when scrolled to the end of items.\n             */\n            this.scrolledToEnd = new core.EventEmitter();\n            /**\n             * Propagates new value when model changes\n             */\n            this.propagateChange = (/**\n             * @return {?}\n             */\n            function () {\n            });\n            this.elementRef = elementRef;\n        }\n        /**\n         * Writes a new value from the form model into the view,\n         * Updates model\n         */\n        /**\n         * Writes a new value from the form model into the view,\n         * Updates model\n         * @param {?} value\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.writeValue = /**\n         * Writes a new value from the form model into the view,\n         * Updates model\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this.query = value;\n        };\n        /**\n         * Registers a handler that is called when something in the view has changed\n         */\n        /**\n         * Registers a handler that is called when something in the view has changed\n         * @param {?} fn\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.registerOnChange = /**\n         * Registers a handler that is called when something in the view has changed\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            this.propagateChange = fn;\n        };\n        /**\n         * Registers a handler specifically for when a control receives a touch event\n         */\n        /**\n         * Registers a handler specifically for when a control receives a touch event\n         * @param {?} fn\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.registerOnTouched = /**\n         * Registers a handler specifically for when a control receives a touch event\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n        };\n        /**\n         * Event that is called when the value of an input element is changed\n         */\n        /**\n         * Event that is called when the value of an input element is changed\n         * @param {?} event\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.onChange = /**\n         * Event that is called when the value of an input element is changed\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            this.propagateChange(event.target.value);\n        };\n        /**\n         * Event that is called when the control status changes to or from DISABLED\n         */\n        /**\n         * Event that is called when the control status changes to or from DISABLED\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.setDisabledState = /**\n         * Event that is called when the control status changes to or from DISABLED\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        function (isDisabled) {\n            this.disabled = isDisabled;\n        };\n        /**\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.ngOnInit = /**\n         * @return {?}\n         */\n        function () {\n            this.setInitialValue(this.initialValue);\n        };\n        /**\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.ngAfterViewInit = /**\n         * @return {?}\n         */\n        function () {\n            this.initEventStream();\n            this.handleScroll();\n        };\n        /**\n         * Set initial value\n         * @param value\n         */\n        /**\n         * Set initial value\n         * @param {?} value\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.setInitialValue = /**\n         * Set initial value\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this.initialValue) {\n                this.select(value);\n            }\n        };\n        /**\n         * Update search results\n         */\n        /**\n         * Update search results\n         * @param {?} changes\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.ngOnChanges = /**\n         * Update search results\n         * @param {?} changes\n         * @return {?}\n         */\n        function (changes) {\n            if (changes &&\n                changes.data &&\n                Array.isArray(changes.data.currentValue)) {\n                this.handleItemsChange();\n                if (!changes.data.firstChange && this.isFocused) {\n                    this.handleOpen();\n                }\n            }\n        };\n        /**\n         * Items change\n         */\n        /**\n         * Items change\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.handleItemsChange = /**\n         * Items change\n         * @return {?}\n         */\n        function () {\n            this.isScrollToEnd = false;\n            if (!this.isOpen) {\n                return;\n            }\n            this.filteredList = this.data;\n            this.notFound = !this.filteredList || this.filteredList.length === 0;\n        };\n        /**\n         * Filter data\n         */\n        /**\n         * Filter data\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.filterList = /**\n         * Filter data\n         * @return {?}\n         */\n        function () {\n            var _this = this;\n            this.selectedIdx = -1;\n            this.initSearchHistory();\n            if (this.query != null && this.data) {\n                this.toHighlight = this.query;\n                this.filteredList = this.data.filter((/**\n                 * @param {?} item\n                 * @return {?}\n                 */\n                function (item) {\n                    if (typeof item === 'string') {\n                        // string logic, check equality of strings\n                        return item.toLowerCase().indexOf(_this.query.toLowerCase()) > -1;\n                    }\n                    else if (typeof item === 'object' && item.constructor === Object) {\n                        // object logic, check property equality\n                        return item[_this.searchKeyword].toLowerCase().indexOf(_this.query.toLowerCase()) > -1;\n                    }\n                }));\n            }\n            else {\n                this.notFound = false;\n            }\n        };\n        /**\n         * Check type of item in the list.\n         * @param item\n         */\n        /**\n         * Check type of item in the list.\n         * @param {?} item\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.isType = /**\n         * Check type of item in the list.\n         * @param {?} item\n         * @return {?}\n         */\n        function (item) {\n            return typeof item === 'string';\n        };\n        /**\n         * Select item in the list.\n         * @param item\n         */\n        /**\n         * Select item in the list.\n         * @param {?} item\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.select = /**\n         * Select item in the list.\n         * @param {?} item\n         * @return {?}\n         */\n        function (item) {\n            var _this = this;\n            this.query = !this.isType(item) ? item[this.searchKeyword] : item;\n            this.isOpen = true;\n            this.overlay = false;\n            this.selected.emit(item);\n            this.propagateChange(item);\n            if (this.initialValue) {\n                // check if history already exists in localStorage and then update\n                /** @type {?} */\n                var history_1 = window.localStorage.getItem(\"\" + this.historyIdentifier);\n                if (history_1) {\n                    /** @type {?} */\n                    var existingHistory = JSON.parse(localStorage[\"\" + this.historyIdentifier]);\n                    if (!(existingHistory instanceof Array))\n                        existingHistory = [];\n                    // check if selected item exists in existingHistory\n                    if (!existingHistory.some((/**\n                     * @param {?} existingItem\n                     * @return {?}\n                     */\n                    function (existingItem) { return !_this.isType(existingItem)\n                        ? existingItem[_this.searchKeyword] == item[_this.searchKeyword] : existingItem == item; }))) {\n                        existingHistory.unshift(item);\n                        localStorage.setItem(\"\" + this.historyIdentifier, JSON.stringify(existingHistory));\n                        // check if items don't exceed max allowed number\n                        if (existingHistory.length >= this.historyListMaxNumber) {\n                            existingHistory.splice(existingHistory.length - 1, 1);\n                            localStorage.setItem(\"\" + this.historyIdentifier, JSON.stringify(existingHistory));\n                        }\n                    }\n                    else {\n                        // if selected item exists in existingHistory swap to top in array\n                        if (!this.isType(item)) {\n                            // object logic\n                            /** @type {?} */\n                            var copiedExistingHistory = existingHistory.slice();\n                            // copy original existingHistory array\n                            /** @type {?} */\n                            var selectedIndex = copiedExistingHistory.map((/**\n                             * @param {?} el\n                             * @return {?}\n                             */\n                            function (el) { return el[_this.searchKeyword]; })).indexOf(item[this.searchKeyword]);\n                            copiedExistingHistory.splice(selectedIndex, 1);\n                            copiedExistingHistory.splice(0, 0, item);\n                            localStorage.setItem(\"\" + this.historyIdentifier, JSON.stringify(copiedExistingHistory));\n                        }\n                        else {\n                            // string logic\n                            /** @type {?} */\n                            var copiedExistingHistory = existingHistory.slice();\n                            copiedExistingHistory.splice(copiedExistingHistory.indexOf(item), 1);\n                            copiedExistingHistory.splice(0, 0, item);\n                            localStorage.setItem(\"\" + this.historyIdentifier, JSON.stringify(copiedExistingHistory));\n                        }\n                    }\n                }\n                else {\n                    this.saveHistory(item);\n                }\n            }\n            else {\n                this.saveHistory(item);\n            }\n            this.handleClose();\n        };\n        /**\n         * Document click\n         * @param e event\n         */\n        /**\n         * Document click\n         * @param {?} e event\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.handleClick = /**\n         * Document click\n         * @param {?} e event\n         * @return {?}\n         */\n        function (e) {\n            /** @type {?} */\n            var clickedComponent = e.target;\n            /** @type {?} */\n            var inside = false;\n            do {\n                if (clickedComponent === this.elementRef.nativeElement) {\n                    inside = true;\n                    if (this.filteredList.length) {\n                        this.handleOpen();\n                    }\n                }\n                clickedComponent = clickedComponent.parentNode;\n            } while (clickedComponent);\n            if (!inside) {\n                this.handleClose();\n            }\n        };\n        /**\n         * Handle body overlay\n         */\n        /**\n         * Handle body overlay\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.handleOverlay = /**\n         * Handle body overlay\n         * @return {?}\n         */\n        function () {\n            this.overlay = false;\n        };\n        /**\n         * Scroll items\n         */\n        /**\n         * Scroll items\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.handleScroll = /**\n         * Scroll items\n         * @return {?}\n         */\n        function () {\n            var _this = this;\n            this.renderer.listen(this.filteredListElement.nativeElement, 'scroll', (/**\n             * @return {?}\n             */\n            function () {\n                _this.scrollToEnd();\n            }));\n        };\n        /**\n         * Define panel state\n         */\n        /**\n         * Define panel state\n         * @param {?} event\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.setPanelState = /**\n         * Define panel state\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            if (event) {\n                event.stopPropagation();\n            }\n            // If controls are untouched\n            if (typeof this.manualOpen === 'undefined'\n                && typeof this.manualClose === 'undefined') {\n                this.isOpen = false;\n                this.handleOpen();\n            }\n            // If one of the controls is untouched and other is deactivated\n            if (typeof this.manualOpen === 'undefined'\n                && this.manualClose === false\n                || typeof this.manualClose === 'undefined'\n                    && this.manualOpen === false) {\n                this.isOpen = false;\n                this.handleOpen();\n            }\n            // if controls are touched but both are deactivated\n            if (this.manualOpen === false && this.manualClose === false) {\n                this.isOpen = false;\n                this.handleOpen();\n            }\n            // if open control is touched and activated\n            if (this.manualOpen) {\n                this.isOpen = false;\n                this.handleOpen();\n                this.manualOpen = false;\n            }\n            // if close control is touched and activated\n            if (this.manualClose) {\n                this.isOpen = true;\n                this.handleClose();\n                this.manualClose = false;\n            }\n        };\n        /**\n         * Manual controls\n         */\n        /**\n         * Manual controls\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.open = /**\n         * Manual controls\n         * @return {?}\n         */\n        function () {\n            this.manualOpen = true;\n            this.isOpen = false;\n            this.handleOpen();\n        };\n        /**\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.close = /**\n         * @return {?}\n         */\n        function () {\n            this.manualClose = true;\n            this.isOpen = true;\n            this.handleClose();\n        };\n        /**\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.focus = /**\n         * @return {?}\n         */\n        function () {\n            this.handleFocus(event);\n        };\n        /**\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.clear = /**\n         * @return {?}\n         */\n        function () {\n            this.remove(event);\n        };\n        /**\n         * Remove search query\n         */\n        /**\n         * Remove search query\n         * @param {?} e\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.remove = /**\n         * Remove search query\n         * @param {?} e\n         * @return {?}\n         */\n        function (e) {\n            e.stopPropagation();\n            this.query = '';\n            this.inputCleared.emit();\n            this.propagateChange(this.query);\n            this.setPanelState(e);\n        };\n        /**\n         * Initialize historyList search\n         */\n        /**\n         * Initialize historyList search\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.initSearchHistory = /**\n         * Initialize historyList search\n         * @return {?}\n         */\n        function () {\n            this.isHistoryListVisible = false;\n            if (this.historyIdentifier && !this.query) {\n                /** @type {?} */\n                var history_2 = window.localStorage.getItem(\"\" + this.historyIdentifier);\n                if (history_2) {\n                    this.isHistoryListVisible = true;\n                    this.filteredList = [];\n                    this.historyList = history_2 ? JSON.parse(history_2) : [];\n                }\n                else {\n                    this.isHistoryListVisible = false;\n                }\n            }\n            else {\n                this.isHistoryListVisible = false;\n            }\n        };\n        /**\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.handleOpen = /**\n         * @return {?}\n         */\n        function () {\n            if (this.isOpen || this.isOpen && !this.isLoading) {\n                return;\n            }\n            // If data exists\n            if (this.data && this.data.length) {\n                this.isOpen = true;\n                this.overlay = true;\n                this.filterList();\n                this.opened.emit();\n            }\n        };\n        /**\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.handleClose = /**\n         * @return {?}\n         */\n        function () {\n            if (!this.isOpen) {\n                this.isFocused = false;\n                return;\n            }\n            this.isOpen = false;\n            this.overlay = false;\n            this.filteredList = [];\n            this.selectedIdx = -1;\n            this.notFound = false;\n            this.isHistoryListVisible = false;\n            this.isFocused = false;\n            this.closed.emit();\n        };\n        /**\n         * @param {?} e\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.handleFocus = /**\n         * @param {?} e\n         * @return {?}\n         */\n        function (e) {\n            this.searchInput.nativeElement.focus();\n            if (this.isFocused) {\n                return;\n            }\n            this.inputFocused.emit(e);\n            // if data exists then open\n            if (this.data && this.data.length) {\n                this.setPanelState(event);\n            }\n            this.isFocused = true;\n        };\n        /**\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.scrollToEnd = /**\n         * @return {?}\n         */\n        function () {\n            if (this.isScrollToEnd) {\n                return;\n            }\n            /** @type {?} */\n            var scrollTop = this.filteredListElement.nativeElement\n                .scrollTop;\n            /** @type {?} */\n            var scrollHeight = this.filteredListElement.nativeElement\n                .scrollHeight;\n            /** @type {?} */\n            var elementHeight = this.filteredListElement.nativeElement\n                .clientHeight;\n            /** @type {?} */\n            var atBottom = scrollHeight === scrollTop + elementHeight;\n            if (atBottom) {\n                this.scrolledToEnd.emit();\n                this.isScrollToEnd = true;\n            }\n        };\n        /**\n         * Initialize keyboard events\n         */\n        /**\n         * Initialize keyboard events\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.initEventStream = /**\n         * Initialize keyboard events\n         * @return {?}\n         */\n        function () {\n            this.inputKeyUp$ = rxjs.fromEvent(this.searchInput.nativeElement, 'keyup').pipe(operators.map((/**\n             * @param {?} e\n             * @return {?}\n             */\n            function (e) { return e; })));\n            this.inputKeyDown$ = rxjs.fromEvent(this.searchInput.nativeElement, 'keydown').pipe(operators.map((/**\n             * @param {?} e\n             * @return {?}\n             */\n            function (e) { return e; })));\n            this.listenEventStream();\n        };\n        /**\n         * Listen keyboard events\n         */\n        /**\n         * Listen keyboard events\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.listenEventStream = /**\n         * Listen keyboard events\n         * @return {?}\n         */\n        function () {\n            var _this = this;\n            // key up event\n            this.inputKeyUp$\n                .pipe(operators.filter((/**\n             * @param {?} e\n             * @return {?}\n             */\n            function (e) {\n                return !isArrowUpDown(e.keyCode) &&\n                    !isEnter(e.keyCode) &&\n                    !isESC(e.keyCode) &&\n                    !isTab(e.keyCode);\n            })), operators.debounceTime(this.debounceTime)).subscribe((/**\n             * @param {?} e\n             * @return {?}\n             */\n            function (e) {\n                _this.onKeyUp(e);\n            }));\n            // cursor up & down\n            this.inputKeyDown$.pipe(operators.filter((/**\n             * @param {?} e\n             * @return {?}\n             */\n            function (e) { return isArrowUpDown(e.keyCode); }))).subscribe((/**\n             * @param {?} e\n             * @return {?}\n             */\n            function (e) {\n                e.preventDefault();\n                _this.onFocusItem(e);\n            }));\n            // enter keyup\n            this.inputKeyUp$.pipe(operators.filter((/**\n             * @param {?} e\n             * @return {?}\n             */\n            function (e) { return isEnter(e.keyCode); }))).subscribe((/**\n             * @param {?} e\n             * @return {?}\n             */\n            function (e) {\n                //this.onHandleEnter();\n            }));\n            // enter keydown\n            this.inputKeyDown$.pipe(operators.filter((/**\n             * @param {?} e\n             * @return {?}\n             */\n            function (e) { return isEnter(e.keyCode); }))).subscribe((/**\n             * @param {?} e\n             * @return {?}\n             */\n            function (e) {\n                _this.onHandleEnter();\n            }));\n            // ESC\n            this.inputKeyUp$.pipe(operators.filter((/**\n             * @param {?} e\n             * @return {?}\n             */\n            function (e) { return isESC(e.keyCode); }), operators.debounceTime(100))).subscribe((/**\n             * @param {?} e\n             * @return {?}\n             */\n            function (e) {\n                _this.onEsc();\n            }));\n            // TAB\n            this.inputKeyDown$.pipe(operators.filter((/**\n             * @param {?} e\n             * @return {?}\n             */\n            function (e) { return isTab(e.keyCode); }))).subscribe((/**\n             * @param {?} e\n             * @return {?}\n             */\n            function (e) {\n                _this.onTab();\n            }));\n            // delete\n            this.inputKeyDown$.pipe(operators.filter((/**\n             * @param {?} e\n             * @return {?}\n             */\n            function (e) { return isBackspace(e.keyCode) || isDelete(e.keyCode); }))).subscribe((/**\n             * @param {?} e\n             * @return {?}\n             */\n            function (e) {\n                _this.onDelete();\n            }));\n        };\n        /**\n         * on keyup == when input changed\n         * @param e event\n         */\n        /**\n         * on keyup == when input changed\n         * @param {?} e event\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.onKeyUp = /**\n         * on keyup == when input changed\n         * @param {?} e event\n         * @return {?}\n         */\n        function (e) {\n            this.notFound = false; // search results are unknown while typing\n            // if input is empty\n            if (!this.query) {\n                this.notFound = false;\n                this.inputChanged.emit(e.target.value);\n                this.inputCleared.emit();\n                //this.filterList();\n                this.setPanelState(e);\n            }\n            // note that '' can be a valid query\n            if (!this.query && this.query !== '') {\n                return;\n            }\n            // if query >= to minQueryLength\n            if (this.query.length >= this.minQueryLength) {\n                this.inputChanged.emit(e.target.value);\n                this.filterList();\n                // If no results found\n                if (!this.filteredList.length && !this.isLoading) {\n                    this.notFoundText ? this.notFound = true : this.notFound = false;\n                }\n            }\n        };\n        /**\n         * Keyboard arrow top and arrow bottom\n         * @param e event\n         */\n        /**\n         * Keyboard arrow top and arrow bottom\n         * @param {?} e event\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.onFocusItem = /**\n         * Keyboard arrow top and arrow bottom\n         * @param {?} e event\n         * @return {?}\n         */\n        function (e) {\n            // move arrow up and down on filteredList or historyList\n            if (!this.historyList.length || !this.isHistoryListVisible) {\n                // filteredList\n                /** @type {?} */\n                var totalNumItem = this.filteredList.length;\n                if (e.key === 'ArrowDown') {\n                    /** @type {?} */\n                    var sum = this.selectedIdx;\n                    sum = (this.selectedIdx === null) ? 0 : sum + 1;\n                    this.selectedIdx = (totalNumItem + sum) % totalNumItem;\n                    this.scrollToFocusedItem(this.selectedIdx);\n                }\n                else if (e.key === 'ArrowUp') {\n                    if (this.selectedIdx == -1) {\n                        this.selectedIdx = 0;\n                    }\n                    this.selectedIdx = (totalNumItem + this.selectedIdx - 1) % totalNumItem;\n                    this.scrollToFocusedItem(this.selectedIdx);\n                }\n            }\n            else {\n                // historyList\n                /** @type {?} */\n                var totalNumItem = this.historyList.length;\n                if (e.key === 'ArrowDown') {\n                    /** @type {?} */\n                    var sum = this.selectedIdx;\n                    sum = (this.selectedIdx === null) ? 0 : sum + 1;\n                    this.selectedIdx = (totalNumItem + sum) % totalNumItem;\n                    this.scrollToFocusedItem(this.selectedIdx);\n                }\n                else if (e.key === 'ArrowUp') {\n                    if (this.selectedIdx == -1) {\n                        this.selectedIdx = 0;\n                    }\n                    this.selectedIdx = (totalNumItem + this.selectedIdx - 1) % totalNumItem;\n                    this.scrollToFocusedItem(this.selectedIdx);\n                }\n            }\n        };\n        /**\n         * Scroll to focused item\n         * * @param index\n         */\n        /**\n         * Scroll to focused item\n         * * \\@param index\n         * @param {?} index\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.scrollToFocusedItem = /**\n         * Scroll to focused item\n         * * \\@param index\n         * @param {?} index\n         * @return {?}\n         */\n        function (index) {\n            /** @type {?} */\n            var listElement = null;\n            // Define list element\n            if (!this.historyList.length || !this.isHistoryListVisible) {\n                // filteredList element\n                listElement = this.filteredListElement.nativeElement;\n            }\n            else {\n                // historyList element\n                listElement = this.historyListElement.nativeElement;\n            }\n            /** @type {?} */\n            var items = Array.prototype.slice.call(listElement.childNodes).filter((/**\n             * @param {?} node\n             * @return {?}\n             */\n            function (node) {\n                if (node.nodeType === 1) {\n                    // if node is element\n                    return node.className.includes('item');\n                }\n                else {\n                    return false;\n                }\n            }));\n            if (!items.length) {\n                return;\n            }\n            /** @type {?} */\n            var listHeight = listElement.offsetHeight;\n            /** @type {?} */\n            var itemHeight = items[index].offsetHeight;\n            /** @type {?} */\n            var visibleTop = listElement.scrollTop;\n            /** @type {?} */\n            var visibleBottom = listElement.scrollTop + listHeight - itemHeight;\n            /** @type {?} */\n            var targetPosition = items[index].offsetTop;\n            if (targetPosition < visibleTop) {\n                listElement.scrollTop = targetPosition;\n            }\n            if (targetPosition > visibleBottom) {\n                listElement.scrollTop = targetPosition - listHeight + itemHeight;\n            }\n        };\n        /**\n         * Select item on enter click\n         */\n        /**\n         * Select item on enter click\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.onHandleEnter = /**\n         * Select item on enter click\n         * @return {?}\n         */\n        function () {\n            // click enter to choose item from filteredList or historyList\n            if (this.selectedIdx > -1) {\n                if (!this.historyList.length || !this.isHistoryListVisible) {\n                    // filteredList\n                    this.query = !this.isType(this.filteredList[this.selectedIdx])\n                        ? this.filteredList[this.selectedIdx][this.searchKeyword]\n                        : this.filteredList[this.selectedIdx];\n                    this.saveHistory(this.filteredList[this.selectedIdx]);\n                    this.select(this.filteredList[this.selectedIdx]);\n                }\n                else {\n                    // historyList\n                    this.query = !this.isType(this.historyList[this.selectedIdx])\n                        ? this.historyList[this.selectedIdx][this.searchKeyword]\n                        : this.historyList[this.selectedIdx];\n                    this.saveHistory(this.historyList[this.selectedIdx]);\n                    this.select(this.historyList[this.selectedIdx]);\n                }\n            }\n            this.isHistoryListVisible = false;\n            this.handleClose();\n        };\n        /**\n         * Esc click\n         */\n        /**\n         * Esc click\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.onEsc = /**\n         * Esc click\n         * @return {?}\n         */\n        function () {\n            this.searchInput.nativeElement.blur();\n            this.handleClose();\n        };\n        /**\n         * Tab click\n         */\n        /**\n         * Tab click\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.onTab = /**\n         * Tab click\n         * @return {?}\n         */\n        function () {\n            this.searchInput.nativeElement.blur();\n            this.handleClose();\n        };\n        /**\n         * Delete click\n         */\n        /**\n         * Delete click\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.onDelete = /**\n         * Delete click\n         * @return {?}\n         */\n        function () {\n            // panel is open on delete\n            this.isOpen = true;\n        };\n        /**\n         * Select item to save in localStorage\n         * @param selected\n         */\n        /**\n         * Select item to save in localStorage\n         * @param {?} selected\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.saveHistory = /**\n         * Select item to save in localStorage\n         * @param {?} selected\n         * @return {?}\n         */\n        function (selected) {\n            var _this = this;\n            if (this.historyIdentifier) {\n                // check if selected item exists in historyList\n                if (!this.historyList.some((/**\n                 * @param {?} item\n                 * @return {?}\n                 */\n                function (item) { return !_this.isType(item)\n                    ? item[_this.searchKeyword] == selected[_this.searchKeyword] : item == selected; }))) {\n                    this.saveHistoryToLocalStorage(__spread([selected], this.historyList));\n                    // check if items don't exceed max allowed number\n                    if (this.historyList.length >= this.historyListMaxNumber) {\n                        this.historyList.splice(this.historyList.length - 1, 1);\n                        this.saveHistoryToLocalStorage(__spread([selected], this.historyList));\n                    }\n                }\n                else {\n                    // if selected item exists in historyList swap to top in array\n                    if (!this.isType(selected)) {\n                        // object logic\n                        /** @type {?} */\n                        var copiedHistoryList = this.historyList.slice();\n                        // copy original historyList array\n                        /** @type {?} */\n                        var selectedIndex = copiedHistoryList.map((/**\n                         * @param {?} item\n                         * @return {?}\n                         */\n                        function (item) { return item[_this.searchKeyword]; })).indexOf(selected[this.searchKeyword]);\n                        copiedHistoryList.splice(selectedIndex, 1);\n                        copiedHistoryList.splice(0, 0, selected);\n                        this.saveHistoryToLocalStorage(__spread(copiedHistoryList));\n                    }\n                    else {\n                        // string logic\n                        /** @type {?} */\n                        var copiedHistoryList = this.historyList.slice();\n                        copiedHistoryList.splice(this.historyList.indexOf(selected), 1);\n                        copiedHistoryList.splice(0, 0, selected);\n                        this.saveHistoryToLocalStorage(__spread(copiedHistoryList));\n                    }\n                }\n            }\n        };\n        /**\n         * Save item in localStorage\n         * @param selected\n         */\n        /**\n         * Save item in localStorage\n         * @param {?} selected\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.saveHistoryToLocalStorage = /**\n         * Save item in localStorage\n         * @param {?} selected\n         * @return {?}\n         */\n        function (selected) {\n            window.localStorage.setItem(\"\" + this.historyIdentifier, JSON.stringify(selected));\n        };\n        /**\n         * Remove item from localStorage\n         * @param index\n         * @param e event\n         */\n        /**\n         * Remove item from localStorage\n         * @param {?} index\n         * @param {?} e event\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.removeHistoryItem = /**\n         * Remove item from localStorage\n         * @param {?} index\n         * @param {?} e event\n         * @return {?}\n         */\n        function (index, e) {\n            e.stopPropagation();\n            this.historyList = this.historyList.filter((/**\n             * @param {?} v\n             * @param {?} i\n             * @return {?}\n             */\n            function (v, i) { return i !== index; }));\n            this.saveHistoryToLocalStorage(this.historyList);\n            if (this.historyList.length == 0) {\n                window.localStorage.removeItem(\"\" + this.historyIdentifier);\n                this.filterList();\n            }\n        };\n        /**\n         * Reset localStorage\n         * @param e event\n         */\n        /**\n         * Reset localStorage\n         * @param {?} e event\n         * @return {?}\n         */\n        AutocompleteComponent.prototype.resetHistoryList = /**\n         * Reset localStorage\n         * @param {?} e event\n         * @return {?}\n         */\n        function (e) {\n            e.stopPropagation();\n            this.historyList = [];\n            window.localStorage.removeItem(\"\" + this.historyIdentifier);\n            this.filterList();\n        };\n        AutocompleteComponent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'ng-autocomplete',\n                        template: \"<div class=\\\"autocomplete-container\\\"\\n     [ngClass]=\\\"{ 'active': isOpen}\\\">\\n  <div class=\\\"input-container\\\">\\n    <input #searchInput type=\\\"text\\\" placeholder={{placeHolder}}\\n           [(ngModel)]=query\\n           (input)=\\\"onChange($event)\\\"\\n           (focus)=handleFocus($event)\\n           [disabled]=\\\"disabled\\\">\\n    <div class=\\\"x\\\" *ngIf=\\\"query && !isLoading && !disabled\\\" (click)=\\\"remove($event)\\\">\\n      <i class=\\\"material-icons\\\">close</i>\\n    </div>\\n    <!--Loading mask-->\\n    <div class=\\\"sk-fading-circle\\\" *ngIf=\\\"isLoading\\\">\\n      <div class=\\\"sk-circle1 sk-circle\\\"></div>\\n      <div class=\\\"sk-circle2 sk-circle\\\"></div>\\n      <div class=\\\"sk-circle3 sk-circle\\\"></div>\\n      <div class=\\\"sk-circle4 sk-circle\\\"></div>\\n      <div class=\\\"sk-circle5 sk-circle\\\"></div>\\n      <div class=\\\"sk-circle6 sk-circle\\\"></div>\\n      <div class=\\\"sk-circle7 sk-circle\\\"></div>\\n      <div class=\\\"sk-circle8 sk-circle\\\"></div>\\n      <div class=\\\"sk-circle9 sk-circle\\\"></div>\\n      <div class=\\\"sk-circle10 sk-circle\\\"></div>\\n      <div class=\\\"sk-circle11 sk-circle\\\"></div>\\n      <div class=\\\"sk-circle12 sk-circle\\\"></div>\\n    </div>\\n  </div>\\n\\n  <!--FilteredList items-->\\n  <div class=\\\"suggestions-container\\\"\\n       [ngClass]=\\\"{ 'is-hidden': isHistoryListVisible, 'is-visible': !isHistoryListVisible}\\\">\\n    <!--FilteredList heading-->\\n    <div class=\\\"heading\\\" *ngIf=\\\"filteredList.length > 0 && heading\\\">\\n      <div class=\\\"text\\\">{{heading}}</div>\\n    </div>\\n\\n    <ul #filteredListElement>\\n      <li *ngFor=\\\"let item of filteredList; let idx = index\\\" class=\\\"item\\\">\\n        <!--string logic-->\\n        <div [class.complete-selected]=\\\"idx === selectedIdx\\\" *ngIf='isType(item)'\\n             (click)=\\\"select(item)\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"itemTemplate;  context: { $implicit: item | highlight: toHighlight }\\\">\\n          </ng-container>\\n        </div>\\n        <!--object logic-->\\n        <div [class.complete-selected]=\\\"idx === selectedIdx\\\" *ngIf='!isType(item)'\\n             (click)=\\\"select(item)\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"itemTemplate; context: { $implicit: item | highlight: toHighlight : searchKeyword }\\\">\\n          </ng-container>\\n        </div>\\n      </li>\\n    </ul>\\n  </div>\\n\\n  <!--HistoryList items-->\\n  <div class=\\\"suggestions-container\\\"\\n       [ngClass]=\\\"{ 'is-hidden': !isHistoryListVisible, 'is-visible': isHistoryListVisible}\\\">\\n    <!--HistoryList heading-->\\n    <div class=\\\"heading\\\" *ngIf=\\\"historyList.length > 0 && historyHeading\\\">\\n      <div class=\\\"text\\\">{{historyHeading}}</div>\\n      <div class=\\\"x\\\" (click)=\\\"resetHistoryList($event)\\\">\\n        <i class=\\\"material-icons\\\">delete</i>\\n      </div>\\n    </div>\\n\\n    <ul #historyListElement>\\n      <li *ngFor=\\\"let item of historyList; let idx = index\\\" class=\\\"item\\\">\\n        <!--string logic-->\\n        <div [class.complete-selected]=\\\"idx === selectedIdx\\\" *ngIf='isType(item)' (click)=\\\"select(item)\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"itemTemplate;  context: { $implicit: item }\\\">\\n          </ng-container>\\n        </div>\\n        <!--object logic-->\\n        <div [class.complete-selected]=\\\"idx === selectedIdx\\\" *ngIf='!isType(item)' (click)=\\\"select(item)\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"itemTemplate; context: { $implicit: item }\\\">\\n          </ng-container>\\n        </div>\\n        <div class=\\\"x\\\" (click)=\\\"removeHistoryItem(idx, $event)\\\">\\n          <i class=\\\"material-icons\\\">close</i>\\n        </div>\\n      </li>\\n    </ul>\\n  </div>\\n\\n  <!--Not found-->\\n  <div class=\\\"not-found\\\" *ngIf=\\\"isLoading ? !isLoading && notFound : notFound\\\">\\n    <ng-container\\n      *ngTemplateOutlet=\\\"notFoundTemplate;  context: { $implicit: notFoundText  }\\\">\\n    </ng-container>\\n  </div>\\n</div>\\n<div class=\\\"overlay\\\" *ngIf=\\\"overlay\\\" (click)=\\\"handleOverlay()\\\"></div>\\n\",\n                        providers: [\n                            {\n                                provide: forms.NG_VALUE_ACCESSOR,\n                                useExisting: core.forwardRef((/**\n                                 * @return {?}\n                                 */\n                                function () { return AutocompleteComponent; })),\n                                multi: true\n                            }\n                        ],\n                        encapsulation: core.ViewEncapsulation.None,\n                        host: {\n                            '(document:click)': 'handleClick($event)',\n                            'class': 'ng-autocomplete'\n                        },\n                        styles: [\"@import url(https://fonts.googleapis.com/icon?family=Material+Icons);.ng-autocomplete{width:600px}.autocomplete-container{box-shadow:0 1px 3px 0 rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 2px 1px -1px rgba(0,0,0,.12);position:relative;overflow:visible;height:40px}.autocomplete-container .input-container input{font-size:14px;box-sizing:border-box;border:none;box-shadow:none;outline:0;background-color:#fff;color:rgba(0,0,0,.87);width:100%;padding:0 15px;line-height:40px;height:40px}.autocomplete-container .input-container input:disabled{background-color:#eee;color:#666}.autocomplete-container .input-container .x{position:absolute;right:10px;margin:auto;cursor:pointer;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.autocomplete-container .input-container .x i{color:rgba(0,0,0,.54);font-size:22px;vertical-align:middle}.autocomplete-container .suggestions-container{position:absolute;width:100%;background:#fff;height:auto;box-shadow:0 2px 5px rgba(0,0,0,.25);box-sizing:border-box}.autocomplete-container .suggestions-container ul{padding:0;margin:0;max-height:240px;overflow-y:auto}.autocomplete-container .suggestions-container ul li{position:relative;list-style:none;padding:0;margin:0;cursor:pointer}.autocomplete-container .suggestions-container ul li a{padding:14px 15px;display:block;text-decoration:none;cursor:pointer;color:rgba(0,0,0,.87);font-size:15px}.autocomplete-container .suggestions-container .complete-selected,.autocomplete-container .suggestions-container ul li:hover{background-color:rgba(158,158,158,.18)}.autocomplete-container .suggestions-container .heading{position:relative;padding:10px 15px;border:1px solid #f1f1f1}.autocomplete-container .suggestions-container .heading .text{font-size:.85em}.autocomplete-container .suggestions-container .x{position:absolute;right:10px;margin:auto;cursor:pointer;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.autocomplete-container .suggestions-container .x i{color:rgba(0,0,0,.54);font-size:18px;vertical-align:middle}.autocomplete-container .suggestions-container.is-hidden{visibility:hidden}.autocomplete-container .suggestions-container.is-visible{visibility:visible}.autocomplete-container .not-found{padding:0 .75em;border:1px solid #f1f1f1;background:#fff}.autocomplete-container .not-found div{padding:.4em 0;font-size:.95em;line-height:1.4;border-bottom:1px solid rgba(230,230,230,.7)}.autocomplete-container.active{z-index:999}.highlight{font-weight:700}.overlay{position:absolute;background-color:transparent;width:100%;height:100%;top:0;right:0;bottom:0;left:0;z-index:50}input[type=text]::-ms-clear{display:none}.sk-fading-circle{width:20px;height:20px;position:absolute;right:10px;top:0;bottom:0;margin:auto}.sk-fading-circle .sk-circle{width:100%;height:100%;position:absolute;left:0;top:0}.sk-fading-circle .sk-circle:before{content:\\\"\\\";display:block;margin:0 auto;width:15%;height:15%;background-color:#333;border-radius:100%;-webkit-animation:1.2s ease-in-out infinite both sk-circleFadeDelay;animation:1.2s ease-in-out infinite both sk-circleFadeDelay}.sk-fading-circle .sk-circle2{-webkit-transform:rotate(30deg);transform:rotate(30deg)}.sk-fading-circle .sk-circle3{-webkit-transform:rotate(60deg);transform:rotate(60deg)}.sk-fading-circle .sk-circle4{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.sk-fading-circle .sk-circle5{-webkit-transform:rotate(120deg);transform:rotate(120deg)}.sk-fading-circle .sk-circle6{-webkit-transform:rotate(150deg);transform:rotate(150deg)}.sk-fading-circle .sk-circle7{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.sk-fading-circle .sk-circle8{-webkit-transform:rotate(210deg);transform:rotate(210deg)}.sk-fading-circle .sk-circle9{-webkit-transform:rotate(240deg);transform:rotate(240deg)}.sk-fading-circle .sk-circle10{-webkit-transform:rotate(270deg);transform:rotate(270deg)}.sk-fading-circle .sk-circle11{-webkit-transform:rotate(300deg);transform:rotate(300deg)}.sk-fading-circle .sk-circle12{-webkit-transform:rotate(330deg);transform:rotate(330deg)}.sk-fading-circle .sk-circle2:before{-webkit-animation-delay:-1.1s;animation-delay:-1.1s}.sk-fading-circle .sk-circle3:before{-webkit-animation-delay:-1s;animation-delay:-1s}.sk-fading-circle .sk-circle4:before{-webkit-animation-delay:-.9s;animation-delay:-.9s}.sk-fading-circle .sk-circle5:before{-webkit-animation-delay:-.8s;animation-delay:-.8s}.sk-fading-circle .sk-circle6:before{-webkit-animation-delay:-.7s;animation-delay:-.7s}.sk-fading-circle .sk-circle7:before{-webkit-animation-delay:-.6s;animation-delay:-.6s}.sk-fading-circle .sk-circle8:before{-webkit-animation-delay:-.5s;animation-delay:-.5s}.sk-fading-circle .sk-circle9:before{-webkit-animation-delay:-.4s;animation-delay:-.4s}.sk-fading-circle .sk-circle10:before{-webkit-animation-delay:-.3s;animation-delay:-.3s}.sk-fading-circle .sk-circle11:before{-webkit-animation-delay:-.2s;animation-delay:-.2s}.sk-fading-circle .sk-circle12:before{-webkit-animation-delay:-.1s;animation-delay:-.1s}@-webkit-keyframes sk-circleFadeDelay{0%,100%,39%{opacity:0}40%{opacity:1}}@keyframes sk-circleFadeDelay{0%,100%,39%{opacity:0}40%{opacity:1}}\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        AutocompleteComponent.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: core.Renderer2 }\n        ]; };\n        AutocompleteComponent.propDecorators = {\n            searchInput: [{ type: core.ViewChild, args: ['searchInput',] }],\n            filteredListElement: [{ type: core.ViewChild, args: ['filteredListElement',] }],\n            historyListElement: [{ type: core.ViewChild, args: ['historyListElement',] }],\n            data: [{ type: core.Input }],\n            searchKeyword: [{ type: core.Input }],\n            placeHolder: [{ type: core.Input }],\n            heading: [{ type: core.Input }],\n            initialValue: [{ type: core.Input }],\n            historyIdentifier: [{ type: core.Input }],\n            historyHeading: [{ type: core.Input }],\n            historyListMaxNumber: [{ type: core.Input }],\n            notFoundText: [{ type: core.Input }],\n            isLoading: [{ type: core.Input }],\n            debounceTime: [{ type: core.Input }],\n            disabled: [{ type: core.Input }],\n            minQueryLength: [{ type: core.Input }],\n            selected: [{ type: core.Output }],\n            inputChanged: [{ type: core.Output }],\n            inputFocused: [{ type: core.Output }],\n            inputCleared: [{ type: core.Output }],\n            opened: [{ type: core.Output }],\n            closed: [{ type: core.Output }],\n            scrolledToEnd: [{ type: core.Output }],\n            itemTemplate: [{ type: core.Input }],\n            notFoundTemplate: [{ type: core.Input }],\n            customTemplate: [{ type: core.ContentChild, args: [core.TemplateRef,] }]\n        };\n        return AutocompleteComponent;\n    }());\n    if (false) {\n        /** @type {?} */\n        AutocompleteComponent.prototype.searchInput;\n        /** @type {?} */\n        AutocompleteComponent.prototype.filteredListElement;\n        /** @type {?} */\n        AutocompleteComponent.prototype.historyListElement;\n        /** @type {?} */\n        AutocompleteComponent.prototype.inputKeyUp$;\n        /** @type {?} */\n        AutocompleteComponent.prototype.inputKeyDown$;\n        /** @type {?} */\n        AutocompleteComponent.prototype.query;\n        /** @type {?} */\n        AutocompleteComponent.prototype.filteredList;\n        /** @type {?} */\n        AutocompleteComponent.prototype.historyList;\n        /** @type {?} */\n        AutocompleteComponent.prototype.isHistoryListVisible;\n        /** @type {?} */\n        AutocompleteComponent.prototype.elementRef;\n        /** @type {?} */\n        AutocompleteComponent.prototype.selectedIdx;\n        /** @type {?} */\n        AutocompleteComponent.prototype.toHighlight;\n        /** @type {?} */\n        AutocompleteComponent.prototype.notFound;\n        /** @type {?} */\n        AutocompleteComponent.prototype.isFocused;\n        /** @type {?} */\n        AutocompleteComponent.prototype.isOpen;\n        /** @type {?} */\n        AutocompleteComponent.prototype.isScrollToEnd;\n        /** @type {?} */\n        AutocompleteComponent.prototype.overlay;\n        /**\n         * @type {?}\n         * @private\n         */\n        AutocompleteComponent.prototype.manualOpen;\n        /**\n         * @type {?}\n         * @private\n         */\n        AutocompleteComponent.prototype.manualClose;\n        /**\n         * Data of items list.\n         * It can be array of strings or array of objects.\n         * @type {?}\n         */\n        AutocompleteComponent.prototype.data;\n        /** @type {?} */\n        AutocompleteComponent.prototype.searchKeyword;\n        /** @type {?} */\n        AutocompleteComponent.prototype.placeHolder;\n        /** @type {?} */\n        AutocompleteComponent.prototype.heading;\n        /** @type {?} */\n        AutocompleteComponent.prototype.initialValue;\n        /**\n         * History identifier of history list\n         * When valid history identifier is given, then component stores selected item to local storage of user's browser.\n         * If it is null then history is hidden.\n         * History list is visible if at least one history item is stored.\n         * @type {?}\n         */\n        AutocompleteComponent.prototype.historyIdentifier;\n        /**\n         * Heading text of history list.\n         * If it is null then history heading is hidden.\n         * @type {?}\n         */\n        AutocompleteComponent.prototype.historyHeading;\n        /** @type {?} */\n        AutocompleteComponent.prototype.historyListMaxNumber;\n        /** @type {?} */\n        AutocompleteComponent.prototype.notFoundText;\n        /** @type {?} */\n        AutocompleteComponent.prototype.isLoading;\n        /** @type {?} */\n        AutocompleteComponent.prototype.debounceTime;\n        /** @type {?} */\n        AutocompleteComponent.prototype.disabled;\n        /**\n         * The minimum number of characters the user must type before a search is performed.\n         * @type {?}\n         */\n        AutocompleteComponent.prototype.minQueryLength;\n        /**\n         * Event that is emitted whenever an item from the list is selected.\n         * @type {?}\n         */\n        AutocompleteComponent.prototype.selected;\n        /**\n         * Event that is emitted whenever an input is changed.\n         * @type {?}\n         */\n        AutocompleteComponent.prototype.inputChanged;\n        /**\n         * Event that is emitted whenever an input is focused.\n         * @type {?}\n         */\n        AutocompleteComponent.prototype.inputFocused;\n        /**\n         * Event that is emitted whenever an input is cleared.\n         * @type {?}\n         */\n        AutocompleteComponent.prototype.inputCleared;\n        /**\n         * Event that is emitted when the autocomplete panel is opened.\n         * @type {?}\n         */\n        AutocompleteComponent.prototype.opened;\n        /**\n         * Event that is emitted when the autocomplete panel is closed.\n         * @type {?}\n         */\n        AutocompleteComponent.prototype.closed;\n        /**\n         * Event that is emitted when scrolled to the end of items.\n         * @type {?}\n         */\n        AutocompleteComponent.prototype.scrolledToEnd;\n        /** @type {?} */\n        AutocompleteComponent.prototype.itemTemplate;\n        /** @type {?} */\n        AutocompleteComponent.prototype.notFoundTemplate;\n        /** @type {?} */\n        AutocompleteComponent.prototype.customTemplate;\n        /**\n         * Propagates new value when model changes\n         * @type {?}\n         */\n        AutocompleteComponent.prototype.propagateChange;\n        /**\n         * @type {?}\n         * @private\n         */\n        AutocompleteComponent.prototype.renderer;\n    }\n\n    /**\n     * @fileoverview added by tsickle\n     * Generated from: lib/autocomplete/highlight.pipe.ts\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var HighlightPipe = /** @class */ (function () {\n        function HighlightPipe() {\n        }\n        /**\n         * @param {?} text\n         * @param {?} search\n         * @param {?=} searchKeyword\n         * @return {?}\n         */\n        HighlightPipe.prototype.transform = /**\n         * @param {?} text\n         * @param {?} search\n         * @param {?=} searchKeyword\n         * @return {?}\n         */\n        function (text, search, searchKeyword) {\n            /** @type {?} */\n            var pattern = search.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n            pattern = pattern.split(' ').filter((/**\n             * @param {?} t\n             * @return {?}\n             */\n            function (t) {\n                return t.length > 0;\n            })).join('|');\n            /** @type {?} */\n            var regex = new RegExp(pattern, 'gi');\n            if (!search) {\n                return text;\n            }\n            if (searchKeyword) {\n                /** @type {?} */\n                var name_1 = text[searchKeyword].replace(regex, (/**\n                 * @param {?} match\n                 * @return {?}\n                 */\n                function (match) { return \"<b>\" + match + \"</b>\"; }));\n                // copy original object\n                /** @type {?} */\n                var text2 = __assign({}, text);\n                // set bold value into searchKeyword of copied object\n                text2[searchKeyword] = name_1;\n                return text2;\n            }\n            else {\n                return search ? text.replace(regex, (/**\n                 * @param {?} match\n                 * @return {?}\n                 */\n                function (match) { return \"<b>\" + match + \"</b>\"; })) : text;\n            }\n        };\n        HighlightPipe.decorators = [\n            { type: core.Pipe, args: [{\n                        name: 'highlight'\n                    },] }\n        ];\n        return HighlightPipe;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * Generated from: lib/autocomplete-lib.module.ts\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var AutocompleteLibModule = /** @class */ (function () {\n        function AutocompleteLibModule() {\n        }\n        AutocompleteLibModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            common.CommonModule,\n                            forms.FormsModule\n                        ],\n                        declarations: [AutocompleteLibComponent, AutocompleteComponent, HighlightPipe],\n                        exports: [AutocompleteLibComponent, AutocompleteComponent, HighlightPipe]\n                    },] }\n        ];\n        return AutocompleteLibModule;\n    }());\n\n    exports.AutocompleteComponent = AutocompleteComponent;\n    exports.AutocompleteLibComponent = AutocompleteLibComponent;\n    exports.AutocompleteLibModule = AutocompleteLibModule;\n    exports.HighlightPipe = HighlightPipe;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}